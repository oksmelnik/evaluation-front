var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { withStyles } from 'material-ui/styles';
import Popover from 'material-ui/Popover';
import Dialog from 'material-ui/Dialog';
import { FormControl, FormHelperText } from 'material-ui/Form';
import Input, { InputLabel, InputAdornment } from 'material-ui/Input';
import IconButton from 'material-ui/IconButton';
import { Today as CalendarIcon } from '@material-ui/icons';
import * as DateUtil from './date';
import Clock from './clock';
var styles = function (theme) { return ({
    label: {
        maxWidth: '100%',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis'
    },
    formControl: {
        cursor: 'pointer'
    },
    input: {
        width: '180px',
        maxWidth: '100%',
        height: '19px',
        padding: '6px 0 7px',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis'
    }
}); };
var TimeFormatInput = /** @class */ (function (_super) {
    __extends(TimeFormatInput, _super);
    function TimeFormatInput(props) {
        var _this = _super.call(this, props) || this;
        _this.onFocus = function (focus) {
            _this.setState({ focus: focus });
        };
        _this.toggleShowCalendar = function () {
            var calendarShow = _this.state.calendarShow;
            _this.setState({ calendarShow: !calendarShow });
        };
        _this.closeCalendar = function () {
            _this.setState({ calendarShow: false });
        };
        var now = new Date();
        var date = new Date(now.getTime());
        var min = props.min, max = props.max;
        if (max && now.getTime() > max.getTime()) {
            date = new Date(max.getTime());
        }
        else if (min && now.getTime() < min.getTime()) {
            date = new Date(min.getTime());
        }
        _this.state = {
            focus: false,
            calendarShow: false
        };
        return _this;
    }
    TimeFormatInput.prototype.componentDidMount = function () {
        var _this = this;
        window.addEventListener('click', function (event) {
            if ([_this.input, _this.clock].reduce(function (contain, next) { return contain && (!next || next.compareDocumentPosition(event.target) < 16); }, true)) {
                _this.closeCalendar();
            }
        });
    };
    TimeFormatInput.prototype.componentDidUpdate = function (prevProps, prevState) {
        if ((prevProps.value && prevProps.value.getTime()) !== (this.props.value && this.props.value.getTime()) && prevState.calendarShow) {
            this.closeCalendar();
        }
    };
    TimeFormatInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, name = _a.name, label = _a.label, value = _a.value, onChange = _a.onChange, placement = _a.placement, error = _a.error, fullWidth = _a.fullWidth, min = _a.min, max = _a.max, dialog = _a.dialog, classes = _a.classes;
        var _b = this.state, focus = _b.focus, calendarShow = _b.calendarShow;
        return ([
            React.createElement("div", { key: 'date-input', ref: function (input) { return _this.input = ReactDOM.findDOMNode(input); } },
                React.createElement(FormControl, { className: classes.formControl, onClick: this.toggleShowCalendar, error: error !== undefined, fullWidth: true },
                    label && React.createElement(InputLabel, { shrink: focus || calendarShow || value !== undefined, classes: { root: classes.label }, htmlFor: name }, label),
                    React.createElement(Input, { name: name, value: value ? DateUtil.format(value, 'EEE, MMMM d, yyyy') : '\u00a0', onFocus: function () { return _this.onFocus(true); }, onBlur: function () { return _this.onFocus(false); }, inputComponent: function (_a) {
                            var value = _a.value;
                            return React.createElement("div", { className: classes.input }, value);
                        }, endAdornment: React.createElement(InputAdornment, { position: 'end' },
                            React.createElement(IconButton, { onMouseDown: function (event) { return event.preventDefault(); } },
                                React.createElement(CalendarIcon, null))) }),
                    error && React.createElement(FormHelperText, { error: true }, error))),
            dialog ?
                React.createElement(Dialog, { open: calendarShow, onClose: this.closeCalendar },
                    React.createElement(Clock, { ref: function (clock) { return _this.clock = ReactDOM.findDOMNode(clock); }, value: value, onChange: onChange })) :
                React.createElement(Popover, { open: calendarShow, anchorOrigin: placement || { vertical: 'top', horizontal: 'left' }, anchorEl: this.input },
                    React.createElement(Clock, { ref: function (clock) { return _this.clock = ReactDOM.findDOMNode(clock); }, value: value, onChange: onChange }))
        ]);
    };
    TimeFormatInput = __decorate([
        withStyles(styles)
    ], TimeFormatInput);
    return TimeFormatInput;
}(React.Component));
export default TimeFormatInput;
//# sourceMappingURL=timepicker.js.map